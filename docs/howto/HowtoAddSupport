Howto: Add support for another video website
============================================

About
-----

libquvi fetches and parses video page contents for various
video details and constructs the video download link from
these parsed details. The project also contains the "quvi"
executable which can be used to develop support for another
website.


Checklist: Before you get started
---------------------------------

* Does the website allow video downloading already?
  - If yes, then there is no reason to add support for it
    - libquvi is intended to work around the flash requirement
    - Such patches will not be committed to the development tree


Figuring out the video dl link scheme
-------------------------------------

The steps to produce the video download link can vary
greatly for each website. For a comparison, see:

    lib/host/evisor.c
    lib/host/liveleak.c

Sometimes extra steps may be required:
  http://code.google.com/p/clive/issues/detail?id=6#c7

Once the data has been analyzed and the link construction
figured out, the only part left is to whip up the code.


Writing the code
----------------

Edit the following files in the source tree:

* lib/quvi.c 
  - add: _host($domain_name) to the "hosts" lookup table
  - if this is an "adult website", make sure you put it inside ENABLE_SMUT

* lib/host.h
  - add: _host($domain_name)
  - if this is an "adult website", make sure you put it inside ENABLE_SMUT

* lib/Makefile.am
  - add host/$domain_name.c to src_host
  - if this is an "adult website", make sure you put it inside ENABLE_SMUT

* lib/host/$domain_name.c (impl. file, create this file)
  - you can use other impl. files as templates (see lib/host/)
  - update copyright notice (use current year, your name, email)
  - add: _host_constants($domain_id, $domain, $supported_formats)
    - formats should be separated with '|', e.g. "flv|hd"
  - add: handle_$domain_name function
    - quvi calls this function when it parses the fetched video page

* src/quvi.c
  - add a test link to the "tests" array

TODO: tests/...


Checklist: Before you submit your patch
---------------------------------------

* Does the website support multiple formats?
  - If yes, then consider adding support for them as well
    - If there's limited data available on this, skip it
    - We can always look into this later when more data is available

* Does your code parse everything correctly?
  - Video ID
  - Video title
  - Video link

* Does your code cleanup the video title?
  - We want the video title only
  - Anything else, e.g. domain name should be excluded from the title

* Did you confirm that all of the above works?
  - e.g. quvi URL


Submitting patches
------------------

See HowtoSubmitPatches.
