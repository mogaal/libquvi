.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "quvi 1"
.TH quvi 1 "2011-06-06" "0.2.17" "quvi manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
quvi \- query media tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
quvi [options] [url|file ...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
quvi is a command line tool for parsing Adobe Flash media stream URLs. It
supports many websites including YouTube and Dailymotion.
.SH "MOTIVATION"
.IX Header "MOTIVATION"
quvi parses Adobe Flash media stream URLs for third party applications. It
originates from the idea of allowing users to view the videos without having
to install or use Adobe Flash Player. quvi is not an \*(L"alternative\*(R" but rather
a \*(L"workaround\*(R" to Adobe Flash Player.
.PP
Read also:
.PP
.Vb 3
\& * <http://en.wikipedia.org/wiki/Adobe_Flash#Performance>
\& * <http://en.wikipedia.org/wiki/Adobe_Flash#Flash_client_security>
\& * <http://en.wikipedia.org/wiki/Adobe_Flash#Alternatives_to_Flash>
.Ve
.SH "NOTES \- PROTOCOL CATEGORIES"
.IX Header "NOTES - PROTOCOL CATEGORIES"
quvi supports \*(L"protocol categories\*(R", but for historical reasons it does not
consider the non-HTTP webscripts unless explicitly told to do so. This
behaviour will change in 0.2.20. Until then, the category switches must be
used with quvi, e.g.:
.PP
.Vb 3
\& % quvi                    # HTTP protocol category (default)
\& % quvi \-\-category\-rtmp    # RTMP protocol category webscripts only
\& % quvi \-\-category\-all     # Webscripts of all supported categories
.Ve
.PP
For example:
.PP
.Vb 2
\& % quvi "RTMP_URL"      # No support
\& % quvi \-a "RTMP_URL"   # OK
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
Unless an arg is specified in the command line, quvi reads from the
stdin. The command line args may be either URLs or files to read.
If quvi reads from either stdin or files, it expects each \s-1URL\s0 to be
separated by a newline character.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print help and exit.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Print program version and exit.
.IP "\fB\-\-license\fR" 4
.IX Item "--license"
Print license and exit.
.IP "\fB\-\-support\fR [\fIarg\fR]" 4
.IX Item "--support [arg]"
Print supported hosts and exit. If an \fIarg\fR is specified, the program
checks, instead, whether the \fIarg\fR is supported.
.IP "\fB\-\-xml\fR" 4
.IX Item "--xml"
Print the media details in \s-1XML\s0.
.IP "\fB\-\-old\fR" 4
.IX Item "--old"
Print the media details in the format used in the prior <0.2.4 versions
of quvi.
.IP "\fB\-q, \-\-quiet\fR" 4
.IX Item "-q, --quiet"
Turn off all output printed to stderr (excl. any errors). If
\&\f(CW\*(C`\-\-verbose\-libcurl\*(C'\fR is enabled, libcurl will continue to print messages to
stderr. The media details will still be printed to stdout.
.IP "\fB\-\-verbose\-libcurl\fR" 4
.IX Item "--verbose-libcurl"
Turn on libcurl verbose mode.
.IP "\fB\-\-exec\fR \fIarg\fR" 4
.IX Item "--exec arg"
Invoke \fIarg\fR after each successfully parsed \s-1URL\s0. Each occurence of the
following specifiers will be replaced (and double-quoted) in the \fIarg\fR:
.Sp
.Vb 1
\& %u  Media URL
.Ve
.IP "\fB\-r, \-\-no\-resolve\fR" 4
.IX Item "-r, --no-resolve"
Do not resolve \s-1URL\s0 redirections. If enabled, breaks the compatibility
with most \*(L"shortened\*(R" URLs. Webscripts that use redirection resolving
explicitly, ignore this switch.
.IP "\fB\-n, \-\-no\-verify\fR" 4
.IX Item "-n, --no-verify"
Do not verify media stream \s-1URL\s0 after parsing. The verification is
specific to \s-1HTTP\s0 and ignored with other protocols. If enabled, some
of the media details, e.g. content length, will be incomplete.
.IP "\fB\-\-category\-http\fR" 4
.IX Item "--category-http"
Enable category \s-1HTTP\s0 webscripts. This is the default category.
.IP "\fB\-\-category\-mms\fR" 4
.IX Item "--category-mms"
Enable category \s-1MMS\s0 webscripts.
.IP "\fB\-\-category\-rtsp\fR" 4
.IX Item "--category-rtsp"
Enable category \s-1RTSP\s0 webscripts.
.IP "\fB\-\-category\-rtmp\fR" 4
.IX Item "--category-rtmp"
Enable category \s-1RTMP\s0 webscripts.
.IP "\fB\-\-category\-all\fR" 4
.IX Item "--category-all"
Enable all categories of webscripts.
.IP "\fB\-F, \-\-query\-formats\fR" 4
.IX Item "-F, --query-formats"
Query available formats.
.IP "\fB\-f, \-\-format\fR \fIarg\fR" 4
.IX Item "-f, --format arg"
Get format \fIarg\fR of the media. \fIarg\fR can also be \f(CW\*(C`help\*(C'\fR or \f(CW\*(C`list\*(C'\fR.
The resulting format may be different from the \fIarg\fR if the library
was unable to get the requested format.
.Sp
\&\fIarg\fR \f(CW\*(C`list\*(C'\fR is deprecated and will be removed in 0.2.20. Use
\&\f(CW\*(C`\-\-query\-formats\*(C'\fR instead.
.IP "\fB\-\-agent\fR \fIarg\fR" 4
.IX Item "--agent arg"
Identify quvi as \fIarg\fR to the \s-1HTTP\s0 servers. Default is \*(L"Mozilla/5.0\*(R".
.IP "\fB\-\-proxy\fR \fIarg\fR" 4
.IX Item "--proxy arg"
Use proxy for \s-1HTTP\s0 connections, e.g. \*(L"http://foo:1234\*(R".
You can also define http_proxy environment setting to
achieve the same.
.IP "\fB\-\-no\-proxy\fR" 4
.IX Item "--no-proxy"
Disable use of \s-1HTTP\s0 proxy completely. Proxy will not be used even
if it is defined in http_proxy.
.IP "\fB\-\-connect\-timeout\fR \fIseconds\fR" 4
.IX Item "--connect-timeout seconds"
Maximum seconds allowed connection to server take.
Default is 30.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Put the URLs inside quotes when they are specified as the command line
arguments to the program. This is the recommended practice.
.ie n .IP "quvi ""\s-1URL\s0""" 4
.el .IP "quvi ``\s-1URL\s0''" 4
.IX Item "quvi URL"
Typical use.
.ie n .IP "quvi \-\-xml ""\s-1URL\s0""" 4
.el .IP "quvi \-\-xml ``\s-1URL\s0''" 4
.IX Item "quvi --xml URL"
Same but print the results in \s-1XML\s0.
.ie n .IP "quvi \-f best ""\s-1URL\s0""" 4
.el .IP "quvi \-f best ``\s-1URL\s0''" 4
.IX Item "quvi -f best URL"
Get for the best available format of the media. This assumes >1
formats are supported, otherwise will fallback to default format.
.ie n .IP "quvi \-F ""\s-1URL\s0""" 4
.el .IP "quvi \-F ``\s-1URL\s0''" 4
.IX Item "quvi -F URL"
Query available formats to the \s-1URL\s0. Use one of the returned format
strings from this list with \f(CW\*(C`\-\-format\*(C'\fR.
.IP "quvi \-\-support" 4
.IX Item "quvi --support"
Print supported website in the \s-1HTTP\s0 category and exit.
.IP "quvi \-\-support \-\-category\-rtmp" 4
.IX Item "quvi --support --category-rtmp"
Same but print only those from the \s-1RTMP\s0 category. See also
\&\*(L"\s-1NOTES\s0 \- \s-1PROTOCOL\s0 \s-1CATEGORIES\s0\*(R".
.ie n .IP "quvi \-\-support ""\s-1URL\s0""" 4
.el .IP "quvi \-\-support ``\s-1URL\s0''" 4
.IX Item "quvi --support URL"
Check whether the \s-1URL\s0 is supported. This does not require an Internet
connection but will fail with most \*(L"shortened\*(R" URLs.
.SH "FILES"
.IX Header "FILES"
.ie n .IP "\fB\fB$HOME\fB/.quvirc\fR" 4
.el .IP "\fB\f(CB$HOME\fB/.quvirc\fR" 4
.IX Item "$HOME/.quvirc"
Most of the command line options can also be defined in the
configuration file. For example:
.Sp
.Vb 4
\& agent = some_agent/1.0     # \-\-agent
\& proxy = http://foo:1234    # \-\-proxy
\& no\-verify                  # \-\-no\-verify
\& verbose\-libcurl            # \-\-verbose\-libcurl
.Ve
.Sp
You can also use \f(CW$QUVI_HOME\fR instead of \f(CW$HOME\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1QUVI_HOME\s0\fR" 4
.IX Item "QUVI_HOME"
Path to the directory with the configuration file. If set, quvi
command uses this instead of \f(CW$HOME\fR.
.IP "\fB\s-1QUVI_BASEDIR\s0\fR" 4
.IX Item "QUVI_BASEDIR"
Path to the \*(L"base directory\*(R" with the libquvi \s-1LUA\s0 scripts. Overrides
the default search paths. e.g.:
.Sp
.Vb 1
\& % env QUVI_BASEDIR=/dir/with/quvi/lua/scripts/ quvi
.Ve
.IP "\fB\s-1QUVI_SHOW_SCANDIR\s0\fR" 4
.IX Item "QUVI_SHOW_SCANDIR"
If set, libquvi prints the \s-1LUA\s0 script search paths to the stderr.
.IP "\fB\s-1QUVI_SHOW_SCRIPT\s0\fR" 4
.IX Item "QUVI_SHOW_SCRIPT"
If set, the \s-1LUA\s0 scripts found by libquvi are printed to the stderr.
.Sp
.Vb 1
\& % env QUVI_SHOW_SCRIPT=1 quvi
.Ve
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
quvi exits with 0 on success and >0 if an error occurred.
.PP
.Vb 10
\& QUVI_OK               = 0x00
\& QUVI_MEM              = 0x01, Memory allocation failed
\&                           (or invalid quvi command line option)
\& QUVI_BADHANDLE        = 0x02, Bad session handle
\& QUVI_INVARG           = 0x03, Invalid function (or command line) arg
\& QUVI_CURLINIT         = 0x04, libcurl initialization failed
\& QUVI_LAST             = 0x05, Indicates end of list iteration
\& QUVI_ABORTEDBYCALLBACK= 0x06, Aborted by callback function
\& QUVI_LUAINIT          = 0x07, Lua initialization failure
\& QUVI_NOLUAWEBSITE     = 0x08, Failed to find lua webscripts
\& QUVI_NOLUAUTIL        = 0x09, Failed to find the utility scripts
\& \-\-
\& QUVI_NOSUPPORT        = 0x41, libquvi does not support the host
\& QUVI_CALLBACK         = 0x42, network callback error occurred
\& QUVI_ICONV            = 0x43, libiconv error occurred
\& QUVI_LUA              = 0x44, lua error occurred
\& \-\- Deprecated (removed in 0.2.20)
\& QUVI_PCRE             = 0x40, libpcre error occurred, depr. since 0.2.9
.Ve
.SH "DEBUGGING TIPS"
.IX Header "DEBUGGING TIPS"
.IP "\fB\-\-verbose\-libcurl\fR" 4
.IX Item "--verbose-libcurl"
Make libcurl verbose.
.IP "\fBDebug symbols\fR" 4
.IX Item "Debug symbols"
Compile quvi with \f(CW\*(C`\-g\*(C'\fR, see also \f(CWgcc(1)\fR.
.IP "\fBOther tools\fR" 4
.IX Item "Other tools"
See also \f(CWgdb(1)\fR, \f(CWstrace(1)\fR and \f(CWvalgrind(1)\fR.
.SH "WWW"
.IX Header "WWW"
.Vb 2
\& Home  : http://quvi.sourceforge.net/
\& gitweb: http://repo.or.cz/w/quvi.git
.Ve
.SH "BACKGROUND"
.IX Header "BACKGROUND"
The name originates from the words \*(L"query\*(R" and \*(L"video\*(R". With the release
0.2.15 a better suited name for the project would be \*(L"qume\*(R" (query
media).
.PP
.Vb 2
\& * Inspired by cclive
\& * Embeddable LUA scripting was introduced in 0.2.0
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
quvi and libquvi are free software, licensed under the LGPLv2.1+.
The \s-1LUA\s0 scripts that quvi uses are considered as programs and using
the \s-1LUA\s0 scripts is \fBlinking\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toni Gundogdu <legatvs at sign gmail com>
.PP
Thanks to all those who have contributed to the project by sending patches,
reporting bugs and writing feedback. You know who you are.
