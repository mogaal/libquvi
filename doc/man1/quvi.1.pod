=pod

=head1 NAME

quvi - query media tool

=head1 SYNOPSIS

quvi [options] [url|file ...]

=head1 DESCRIPTION

quvi is a command line tool for parsing Adobe Flash media stream URLs. It
supports many websites including YouTube and Dailymotion.

=head1 MOTIVATION

quvi parses Adobe Flash media stream URLs for third party applications. It
originates from the idea of allowing users to view the videos without having
to install or use Adobe Flash Player. quvi is not an "alternative" but rather
a "workaround" to Adobe Flash Player.

Read also:

 * <http://en.wikipedia.org/wiki/Adobe_Flash#Performance>
 * <http://en.wikipedia.org/wiki/Adobe_Flash#Flash_client_security>
 * <http://en.wikipedia.org/wiki/Adobe_Flash#Alternatives_to_Flash>

=head1 NOTES - PROTOCOL CATEGORIES

quvi supports "protocol categories", but for historical reasons it does not
consider the non-HTTP webscripts unless explicitly told to do so. This
behaviour will change in 0.2.20. Until then, the category switches must be
used with quvi, e.g.:

 % quvi                    # HTTP protocol category (default)
 % quvi --category-rtmp    # RTMP protocol category webscripts only
 % quvi --category-all     # Webscripts of all supported categories

For example:

 % quvi "RTMP_URL"      # No support
 % quvi -a "RTMP_URL"   # OK

=head1 OPTIONS

Unless an arg is specified in the command line, quvi reads from the
stdin. The command line args may be either URLs or files to read.
If quvi reads from either stdin or files, it expects each URL to be
separated by a newline character.

=over 4

=item B<-h, --help>

Print help and exit.

=item B<--version>

Print program version and exit.

=item B<--license>

Print license and exit.

=item B<--support> [I<arg>]

Print supported hosts and exit. If an I<arg> is specified, the program
checks, instead, whether the I<arg> is supported.

=item B<--xml>

Print the media details in XML.

=item B<--old>

Print the media details in the format used in the prior E<lt>0.2.4 versions
of quvi.

=item B<-q, --quiet>

Turn off all output printed to stderr (excl. any errors). If
C<--verbose-libcurl> is enabled, libcurl will continue to print messages to
stderr. The media details will still be printed to stdout.

=item B<--verbose-libcurl>

Turn on libcurl verbose mode.

=item B<--exec> I<arg>

Invoke I<arg> after each successfully parsed URL. Each occurence of the
following specifiers will be replaced (and double-quoted) in the I<arg>:

 %u  Media URL

=item B<-r, --no-resolve>

Do not resolve URL redirections. If enabled, breaks the compatibility
with most "shortened" URLs. Webscripts that use redirection resolving
explicitly, ignore this switch.

=item B<-n, --no-verify>

Do not verify media stream URL after parsing. The verification is
specific to HTTP and ignored with other protocols. If enabled, some
of the media details, e.g. content length, will be incomplete.

=item B<--category-http>

Enable category HTTP webscripts. This is the default category.

=item B<--category-mms>

Enable category MMS webscripts.

=item B<--category-rtsp>

Enable category RTSP webscripts.

=item B<--category-rtmp>

Enable category RTMP webscripts.

=item B<--category-all>

Enable all categories of webscripts.

=item B<-F, --query-formats>

Query available formats.

=item B<-f, --format> I<arg>

Get format I<arg> of the media. I<arg> can also be C<help> or C<list>.
The resulting format may be different from the I<arg> if the library
was unable to get the requested format.

I<arg> C<list> is deprecated and will be removed in 0.2.20. Use
C<--query-formats> instead.

=item B<--agent> I<arg>

Identify quvi as I<arg> to the HTTP servers. Default is "Mozilla/5.0".

=item B<--proxy> I<arg>

Use proxy for HTTP connections, e.g. "http://foo:1234".
You can also define http_proxy environment setting to
achieve the same.

=item B<--no-proxy>

Disable use of HTTP proxy completely. Proxy will not be used even
if it is defined in http_proxy.

=item B<--connect-timeout> I<seconds>

Maximum seconds allowed connection to server take.
Default is 30.

=back

=head1 EXAMPLES

Put the URLs inside quotes when they are specified as the command line
arguments to the program. This is the recommended practice.

=over 4

=item quvi "URL"

Typical use.

=item quvi --xml "URL"

Same but print the results in XML.

=item quvi -f best "URL"

Get for the best available format of the media. This assumes E<gt>1
formats are supported, otherwise will fallback to default format.

=item quvi -F "URL"

Query available formats to the URL. Use one of the returned format
strings from this list with C<--format>.

=item quvi --support

Print supported website in the HTTP category and exit.

=item quvi --support --category-rtmp

Same but print only those from the RTMP category. See also
L</NOTES - PROTOCOL CATEGORIES>.

=item quvi --support "URL"

Check whether the URL is supported. This does not require an Internet
connection but will fail with most "shortened" URLs.

=back

=head1 FILES

=over 4

=item B<$HOME/.quvirc>

Most of the command line options can also be defined in the
configuration file. For example:

 agent = some_agent/1.0     # --agent
 proxy = http://foo:1234    # --proxy
 no-verify                  # --no-verify
 verbose-libcurl            # --verbose-libcurl

You can also use $QUVI_HOME instead of $HOME.

=back

=head1 ENVIRONMENT

=over 4

=item B<QUVI_HOME>

Path to the directory with the configuration file. If set, quvi
command uses this instead of $HOME.

=item B<QUVI_BASEDIR>

Path to the "base directory" with the libquvi LUA scripts. Overrides
the default search paths. e.g.:

 % env QUVI_BASEDIR=/dir/with/quvi/lua/scripts/ quvi

=item B<QUVI_SHOW_SCANDIR>

If set, libquvi prints the LUA script search paths to the stderr.

=item B<QUVI_SHOW_SCRIPT>

If set, the LUA scripts found by libquvi are printed to the stderr.

 % env QUVI_SHOW_SCRIPT=1 quvi

=back

=head1 EXIT STATUS

quvi exits with 0 on success and E<gt>0 if an error occurred.

 QUVI_OK               = 0x00
 QUVI_MEM              = 0x01, Memory allocation failed
                           (or invalid quvi command line option)
 QUVI_BADHANDLE        = 0x02, Bad session handle
 QUVI_INVARG           = 0x03, Invalid function (or command line) arg
 QUVI_CURLINIT         = 0x04, libcurl initialization failed
 QUVI_LAST             = 0x05, Indicates end of list iteration
 QUVI_ABORTEDBYCALLBACK= 0x06, Aborted by callback function
 QUVI_LUAINIT          = 0x07, Lua initialization failure
 QUVI_NOLUAWEBSITE     = 0x08, Failed to find lua webscripts
 QUVI_NOLUAUTIL        = 0x09, Failed to find the utility scripts
 --
 QUVI_NOSUPPORT        = 0x41, libquvi does not support the host
 QUVI_CALLBACK         = 0x42, network callback error occurred
 QUVI_ICONV            = 0x43, libiconv error occurred
 QUVI_LUA              = 0x44, lua error occurred
 -- Deprecated (removed in 0.2.20)
 QUVI_PCRE             = 0x40, libpcre error occurred, depr. since 0.2.9

=head1 DEBUGGING TIPS

=over 4

=item B<--verbose-libcurl>

Make libcurl verbose.

=item B<Debug symbols>

Compile quvi with C<-g>, see also C<gcc(1)>.

=item B<Other tools>

See also C<gdb(1)>, C<strace(1)> and C<valgrind(1)>.

=back

=head1 WWW

 Home  : http://quvi.sourceforge.net/
 gitweb: http://repo.or.cz/w/quvi.git

=head1 BACKGROUND

The name originates from the words "query" and "video". With the release
0.2.15 a better suited name for the project would be "qume" (query
media).

 * Inspired by cclive
 * Embeddable LUA scripting was introduced in 0.2.0

=head1 LICENSE

quvi and libquvi are free software, licensed under the LGPLv2.1+.
The LUA scripts that quvi uses are considered as programs and using
the LUA scripts is B<linking>.

=head1 AUTHOR

Toni Gundogdu E<lt>legatvs at sign gmail comE<gt>

Thanks to all those who have contributed to the project by sending patches,
reporting bugs and writing feedback. You know who you are.

=cut
