.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "quvi 1"
.TH quvi 1 "2010-10-19" "0.2.7" "quvi manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
quvi \- query video tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
quvi [options] [url...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
quvi is a command line tool for parsing video download links.
It supports Youtube and other similar video websites.
.PP
The video details are printed to standard output (in \s-1JSON\s0),
everything else is printed to standard error.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print help and exit.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Print program version and exit.
.IP "\fB\-\-license\fR" 4
.IX Item "--license"
Print license and exit.
.IP "\fB\-\-support\fR" 4
.IX Item "--support"
Print supported hosts and exit.
.IP "\fB\-\-xml\fR" 4
.IX Item "--xml"
Print the details in \s-1XML\s0 (instead of \s-1JSON\s0). URLs are escaped (\s-1URL\s0 encoded,
unlike in \s-1JSON\s0). Encoding is always \s-1UTF\-8\s0 (like in \s-1JSON\s0).
.IP "\fB\-\-old\fR" 4
.IX Item "--old"
Print the details in the previously used default output format
(0.2.3 and earlier).
.IP "\fB\-q, \-\-quiet\fR" 4
.IX Item "-q, --quiet"
Turn off output to stderr (excl. errors, libcurl). Video details will
be printed to stdout as they would be normally.
.IP "\fB\-\-verbose\-libcurl\fR" 4
.IX Item "--verbose-libcurl"
Turn on libcurl verbose mode.
.IP "\fB\-\-exec\fR \fIarg\fR" 4
.IX Item "--exec arg"
Invoke \fIarg\fR for each (successfully) parsed video. You can use the following
specifiers in \fIarg\fR:
.Sp
.Vb 1
\&    %u  Video download URL
.Ve
.Sp
Note that \fIall\fR occurences of the specifier will be replaced,
and each new value will be quoted ("").
.IP "\fB\-n, \-\-no\-verify\fR" 4
.IX Item "-n, --no-verify"
Do not verify video link after parsing it. Normally this serves two
purposes: check that the link actually works, and get content-length
as well as content-type for the video.
.Sp
If this switch used, the program will report invalid values for those
video details (e.g. 0 file length, empty string for content-type, etc.)
but saves some bandwidth if those details are not obligatory.
.IP "\fB\-\-page\-title\fR \fIarg\fR" 4
.IX Item "--page-title arg"
Check that the parsed video title matches the \fIarg\fR.
The libquvi tests typically make use of this option.
.IP "\fB\-\-video\-id\fR \fIarg\fR" 4
.IX Item "--video-id arg"
Check that the parsed video \s-1ID\s0 matches the \fIarg\fR.
The libquvi tests typically make use of this option.
.IP "\fB\-\-file\-length\fR \fIlength\fR" 4
.IX Item "--file-length length"
Check that the parsed video file length matches the \fIarg\fR.
The libquvi tests typically make use of this option.
.IP "\fB\-\-file\-suffix\fR \fIarg\fR" 4
.IX Item "--file-suffix arg"
Check that the parsed video file suffix matches the \fIarg\fR.
The libquvi tests typically make use of this option.
.IP "\fB\-a, \-\-test\-all\fR" 4
.IX Item "-a, --test-all"
quvi holds a number of built-in video URLs that can be tested
with this switch.
.IP "\fB\-d, \-\-dump\fR" 4
.IX Item "-d, --dump"
Dump video details while when running the program with \f(CW\*(C`\-\-test\-all\*(C'\fR.
.IP "\fB\-t, \-\-test\fR \fIarg\fR" 4
.IX Item "-t, --test arg"
quvi holds a number of built-in video URLs that can be matched
with this option. Some examples:
.Sp
.Vb 2
\&    % quvi \-t youtube
\&    % quvi \-t yout
.Ve
.Sp
Both would match the same built-in test \s-1URL\s0 for Youtube. Some
more examples:
    % quvi \-t livel
    % quvi \-t liveleak
    % quvi \-t col
    % quvi \-t collegehumor
.Sp
As long as the built-in \s-1URL\s0 contains the pattern, it can be
matched. Like \f(CW\*(C`\-\-page\-title\*(C'\fR and friends, this feature is
intended to be used by libquvi tests.
.IP "\fB\-f, \-\-format\fR \fIarg\fR" 4
.IX Item "-f, --format arg"
Query for video format \fIarg\fR. You can get a list of the formats
that each website (should) support by running the program with
\&\f(CW\*(C`\-\-support\*(C'\fR.
.IP "\fB\-\-agent\fR \fIarg\fR" 4
.IX Item "--agent arg"
Identify quvi as \fIarg\fR to servers. Default is \*(L"Mozilla/5.0\*(R".
.IP "\fB\-\-proxy\fR \fIarg\fR" 4
.IX Item "--proxy arg"
Use proxy for \s-1HTTP\s0 connections, e.g. \*(L"http://foo:1234\*(R".
You can also define http_proxy environment setting to
achieve the same.
.IP "\fB\-\-no\-proxy\fR" 4
.IX Item "--no-proxy"
Disable use of \s-1HTTP\s0 proxy completely. Proxy will not
be used even if defined in http_proxy.
.IP "\fB\-\-connect\-timeout\fR \fIseconds\fR" 4
.IX Item "--connect-timeout seconds"
Maximum seconds allowed connection to server take.
Default is 30.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "quvi \s-1URL\s0" 4
.IX Item "quvi URL"
Test \s-1URL\s0.
.IP "quvi \-a" 4
.IX Item "quvi -a"
Run all built-in host tests.
.IP "quvi \-aqd \-\-xml" 4
.IX Item "quvi -aqd --xml"
Same but run in quiet mode. Print video details in \s-1XML\s0 (to stdout).
.IP "quvi \-t youtube" 4
.IX Item "quvi -t youtube"
Match pattern \*(L"youtube\*(R" to a built-in video \s-1URL\s0 and test it.
.IP "quvi \s-1YOUTUBE_URL\s0 \-f best" 4
.IX Item "quvi YOUTUBE_URL -f best"
Query \s-1YOUTUBE_URL\s0 for \*(L"best\*(R" format of the video.
.Sp
Run quvi with \f(CW\*(C`\-\-support\*(C'\fR to get a list of the websites
and which formats they support.
.SH "FILES"
.IX Header "FILES"
.IP "\fB~/.quvirc\fR" 4
.IX Item "~/.quvirc"
You can define most of the command line options in the
config file. For example:
.Sp
.Vb 4
\& agent = some_agent/1.0     # \-\-agent
\& proxy = http://foo:1234    # \-\-proxy
\& no\-verify                  # \-\-no\-verify
\& verbose\-libcurl            # \-\-verbose\-libcurl
.Ve
.Sp
Note that you can also define \f(CW$QUVI_HOME\fR and use it instead of \f(CW$HOME\fR (~).
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1QUVI_HOME\s0\fR" 4
.IX Item "QUVI_HOME"
Path to the directory containing the configuration file (.quvirc).
Mimics \f(CW$HOME\fR found on Unix-like systems. Note that using this
overrides the use of \f(CW$HOME\fR.
.IP "\fB\s-1QUVI_BASEDIR\s0\fR" 4
.IX Item "QUVI_BASEDIR"
Exclusive path to the directory holding the essential libquvi files,
or the Lua scripts.
.Sp
Exlusivity here means that by setting this variable, the user
can override all other built-in and default search paths.
.Sp
Not to be confused with \fB\s-1QUVI_HOME\s0\fR which is strictly for
\&\f(CWquvi(1)\fR, whereas \fB\s-1QUVI_BASEDIR\s0\fR is for libquvi.
.IP "\fB\s-1QUVI_SHOW_SCANDIR\s0\fR" 4
.IX Item "QUVI_SHOW_SCANDIR"
Set this variable if you need libquvi to report the scanned
directory paths. Each scanned path is printed to stderr.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
quvi exits with 0 on success and >0 if an error occurred.
.PP
.Vb 10
\&  QUVI_OK               = 0x00
\&  QUVI_MEM              = 0x01, Memory allocation failed
\&  QUVI_BADHANDLE        = 0x02, Bad session handle
\&  QUVI_INVARG           = 0x03, Invalid function argument
\&  QUVI_CURLINIT         = 0x04, libcurl initialization failed
\&  QUVI_LAST             = 0x05, Indicates end of list iteration
\&  QUVI_ABORTEDBYCALLBACK= 0x06, Aborted by callback function
\&  QUVI_LUAINIT          = 0x07, Lua initialization failure
\&  QUVI_NOLUAWEBSITE     = 0x08, Failed to find lua website scripts
\&  \-\-
\&  QUVI_PCRE             = 0x40, libpcre error occurred
\&  QUVI_NOSUPPORT        = 0x41, libquvi does not support the video host
\&  QUVI_CURL             = 0x42, libcurl error occurred
\&  QUVI_ICONV            = 0x43, libiconv error occurred
\&  QUVI_LUA              = 0x44, lua error occurred
.Ve
.SH "CONTRIBUTING"
.IX Header "CONTRIBUTING"
.IP "\fBAdd support for another website\fR" 4
.IX Item "Add support for another website"
On most systems you can find the READMEs and HOWTOs from \f(CW$prefix\fR/share/quvi
and \f(CW$prefix\fR/share/doc/quvi directories. You can find the same files in
release source tarballs, and at:
.Sp
.Vb 3
\&    <http://repo.or.cz/w/quvi.git/tree/HEAD:/doc>
\&    <http://repo.or.cz/w/quvi.git/tree/HEAD:/share/lua>
\&    <http://repo.or.cz/w/quvi.git/tree/HEAD:/share/lua/website>
.Ve
.IP "\fBSubmitting patches\fR" 4
.IX Item "Submitting patches"
If you have cooked up a patch, please submit it to the tracker (see \*(L"\s-1BUGS\s0\*(R").
.Sp
If you are working with git and you have established a repo from which
we can pull the changes from, you can use the same tracker for leaving
pull requests.
.SH "BUGS"
.IX Header "BUGS"
.IP "\fBTrackers\fR" 4
.IX Item "Trackers"
Bugs, support, patches, etc. trackers for these can be found at:
  <http://sourceforge.net/projects/quvi/support>
.SH "DEBUGGING TIPS"
.IX Header "DEBUGGING TIPS"
.IP "\fB\-\-verbose\-libcurl\fR" 4
.IX Item "--verbose-libcurl"
You can use this switch to amp up libcurl verbosity.
.IP "\fBDebug symbols\fR" 4
.IX Item "Debug symbols"
Compile quvi with \f(CW\*(C`\-g\*(C'\fR (see \f(CW\*(C`g++(1)\*(C'\fR) for debug symbols.
.IP "\fBOther tools\fR" 4
.IX Item "Other tools"
Make use of such tools as \f(CWstrace(1)\fR, \f(CWgdb(1)\fR and \f(CWvalgrind(1)\fR.
They may prove invaluable.
.SH "OTHER"
.IX Header "OTHER"
.IP "\fBProject\fR" 4
.IX Item "Project"
<http://quvi.googlecode.com/>
.Sp
<http://quvi.sourceforge.net/> \*(-- redirects to the above
.IP "\fBFiles\fR" 4
.IX Item "Files"
The downloadable files (e.g. source tarballs) can be found at:
.Sp
<http://quvi.googlecode.com/>
.Sp
<http://sourceforge.net/projects/quvi/files/> \*(-- mirror
.IP "\fBDevelopment repository\fR" 4
.IX Item "Development repository"
git clone git://repo.or.cz/quvi.git
.SH "AUTHOR"
.IX Header "AUTHOR"
Toni Gundogdu <legatvs at sign gmail com>.
.PP
Thanks to all those who have contributed to the project
by sending patches, reporting bugs and writing feedback.
You know who you are.
.PP
See also \*(L"\s-1BUGS\s0\*(R", \*(L"\s-1DEBUGGING\s0 \s-1TIPS\s0\*(R" and \*(L"\s-1CONTRIBUTING\s0\*(R".
