.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "quvi 1"
.TH quvi 1 "2011-04-15" "0.2.15" "quvi manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
quvi \- query media tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
quvi [options] [url...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
quvi is a command line tool for parsing Adobe Flash media stream URLs. It
supports many websites including YouTube and Dailymotion.
.PP
The parsed details are printed to standard output (in \s-1JSON\s0), everything else
is printed to standard error.
.SH "MOTIVATION"
.IX Header "MOTIVATION"
quvi parses Adobe Flash media stream URLs for third party applications. It
originates from the idea of allowing users to view the videos without having
to install or use Adobe Flash Player. quvi is not an \*(L"alternative\*(R" but rather
a \*(L"workaround\*(R" to Adobe Flash Player.
.PP
Read also:
  * <http://en.wikipedia.org/wiki/Adobe_Flash#Performance>
  * <http://en.wikipedia.org/wiki/Adobe_Flash#Flash_client_security>
  * <http://en.wikipedia.org/wiki/Adobe_Flash#Alternatives_to_Flash>
.SH "NOTES \- PROTOCOL CATEGORIES"
.IX Header "NOTES - PROTOCOL CATEGORIES"
As of 0.2.12, quvi supports different \*(L"protocol categories\*(R". For
historical reasons, it defaults to the \s-1HTTP\s0 category. This means
that any website scripts that parse and return \s-1RTMP/MMS/RTSP\s0 media
URLs are not considered unless an appropriate category switch is used.
For example:
    % quvi \-\-support                 # \s-1HTTP\s0 websites only (default)
    % quvi \-\-support \-\-category\-rtmp # \s-1RTMP\s0 websites only
    % quvi \-\-support \-a              # Websites of all categories
.PP
With this in mind:
    % quvi \s-1RTMP_URL\s0
    error: no support: \s-1RTMP_URL\s0
    % quvi \-a \s-1RTMP_URL\s0 # \s-1OK\s0
.PP
The default behaviour is planned to change to \*(L"all\*(R" in 0.2.20.
.SH "OPTIONS"
.IX Header "OPTIONS"
quvi reads content from the standard input (stdin) by default unless
an \s-1URL\s0 is specified in the command line. quvi expects each \s-1URL\s0 to be
separated by a newline if they are read from the stdin.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print help and exit.
.IP "\fB\-\-version\fR" 4
.IX Item "--version"
Print program version and exit.
.IP "\fB\-\-license\fR" 4
.IX Item "--license"
Print license and exit.
.IP "\fB\-\-support\fR" 4
.IX Item "--support"
Print supported hosts and exit. To check if an \s-1URL\s0 is supported, specify
an \s-1URL\s0 as an argument to the program. See \*(L"\s-1EXAMPLES\s0\*(R".
.IP "\fB\-\-xml\fR" 4
.IX Item "--xml"
Print the details in \s-1XML\s0 (instead of \s-1JSON\s0). URLs are escaped (\s-1URL\s0 encoded,
unlike in \s-1JSON\s0). Encoding is always \s-1UTF\-8\s0 (like in \s-1JSON\s0).
.IP "\fB\-\-old\fR" 4
.IX Item "--old"
Print the details in the previously used default output format
(0.2.3 and earlier).
.IP "\fB\-q, \-\-quiet\fR" 4
.IX Item "-q, --quiet"
Turn off all output printed to stderr (excl. any errors). libcurl
will continue to generate messages to stderr if the \*(L"\-\-verbose\-libcurl\*(R"
switch is used.
.Sp
This switch has no no effect on the the media details which are
printed to stdout.
.IP "\fB\-\-verbose\-libcurl\fR" 4
.IX Item "--verbose-libcurl"
Turn on libcurl verbose mode.
.IP "\fB\-\-exec\fR \fIarg\fR" 4
.IX Item "--exec arg"
Invoke \fIarg\fR for each (successfully) parsed media. You can use the following
specifiers in \fIarg\fR:
.Sp
.Vb 1
\&    %u  Media URL
.Ve
.Sp
Note that \fIall\fR occurences of the specifier will be replaced,
and each new value will be quoted ("").
.IP "\fB\-s, \-\-no\-shortened\fR" 4
.IX Item "-s, --no-shortened"
Do not \*(L"decompress\*(R" shortened URLs before using them.
.IP "\fB\-n, \-\-no\-verify\fR" 4
.IX Item "-n, --no-verify"
Do not verify media \s-1URL\s0 after parsing it. Normally this serves two
purposes:
.Sp
.Vb 2
\& * Check that the URL works
\& * Get content\-length and content\-type
.Ve
.Sp
If this switch used, the program will report invalid values for those
details (e.g. 0 content length, empty string for content-type, etc.) but
may save some bandwidth if those details are not needed.
.Sp
Note that the \s-1URL\s0 is verified for \s-1HTTP\s0 only.
.IP "\fB\-\-category\-http\fR" 4
.IX Item "--category-http"
Enable category \s-1HTTP\s0 website scripts. This is the default category.
.IP "\fB\-\-category\-mms\fR" 4
.IX Item "--category-mms"
Enable category \s-1MMS\s0 website scripts.
.IP "\fB\-\-category\-rtsp\fR" 4
.IX Item "--category-rtsp"
Enable category \s-1RTSP\s0 website scripts.
.IP "\fB\-\-category\-rtmp\fR" 4
.IX Item "--category-rtmp"
Enable category \s-1RTMP\s0 website scripts.
.IP "\fB\-\-category\-all\fR" 4
.IX Item "--category-all"
Enable all categories of website scripts.
.IP "\fB\-f, \-\-format\fR \fIarg\fR" 4
.IX Item "-f, --format arg"
Query for \fIarg\fR format. \fIarg\fR can also be \f(CW\*(C`help\*(C'\fR.
.IP "\fB\-\-agent\fR \fIarg\fR" 4
.IX Item "--agent arg"
Identify quvi as \fIarg\fR to servers. Default is \*(L"Mozilla/5.0\*(R".
.IP "\fB\-\-proxy\fR \fIarg\fR" 4
.IX Item "--proxy arg"
Use proxy for \s-1HTTP\s0 connections, e.g. \*(L"http://foo:1234\*(R".
You can also define http_proxy environment setting to
achieve the same.
.IP "\fB\-\-no\-proxy\fR" 4
.IX Item "--no-proxy"
Disable use of \s-1HTTP\s0 proxy completely. Proxy will not
be used even if defined in http_proxy.
.IP "\fB\-\-connect\-timeout\fR \fIseconds\fR" 4
.IX Item "--connect-timeout seconds"
Maximum seconds allowed connection to server take.
Default is 30.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "quvi \s-1URL\s0" 4
.IX Item "quvi URL"
Test \s-1URL\s0.
.IP "quvi \-\-support" 4
.IX Item "quvi --support"
Dump supported websites (of \s-1HTTP\s0 category).
.IP "quvi \-\-support \-\-category\-rtmp" 4
.IX Item "quvi --support --category-rtmp"
Same but dump supported websites of \s-1RTMP\s0 category.
See also \*(L"\s-1NOTES\s0 \- \s-1PROTOCOL\s0 \s-1CATEGORIES\s0\*(R"
.IP "quvi \-\-support \-\-category\-all" 4
.IX Item "quvi --support --category-all"
Dump \fBall\fR supported websites.
See also \*(L"\s-1NOTES\s0 \- \s-1PROTOCOL\s0 \s-1CATEGORIES\s0\*(R"
.IP "quvi \-\-support \s-1URL\s0" 4
.IX Item "quvi --support URL"
Check if \s-1URL\s0 is supported. Note that some of the shortened URLs will
fail with this. quvi exit status will be the last exit status of the
last checked \s-1URL\s0. See also \*(L"\s-1EXIT\s0 \s-1STATUS\s0\*(R".
.IP "quvi \-\-support \-\-category\-all \s-1URL\s0" 4
.IX Item "quvi --support --category-all URL"
Same but check against all protocol categories.
See also \*(L"\s-1NOTES\s0 \- \s-1PROTOCOL\s0 \s-1CATEGORIES\s0\*(R"
.IP "quvi \s-1YOUTUBE_URL\s0" 4
.IX Item "quvi YOUTUBE_URL"
Query for YouTube media \s-1URL\s0.
.IP "quvi \s-1YOUTUBE_URL\s0 \-f best" 4
.IX Item "quvi YOUTUBE_URL -f best"
Query for \*(L"best\*(R" (available format) YouTube media \s-1URL\s0.
.IP "quvi \s-1YOUTUBE_URL\s0 \-f best \-\-xml" 4
.IX Item "quvi YOUTUBE_URL -f best --xml"
Same but print details in \s-1XML\s0.
.IP "quvi \-f list youtube" 4
.IX Item "quvi -f list youtube"
Print available formats for YouTube.
.IP "quvi \-f list yout" 4
.IX Item "quvi -f list yout"
Same.
.IP "quvi \-f list dailym" 4
.IX Item "quvi -f list dailym"
Print available formats for dailym(otion).
.ie n .IP "echo ""\s-1URL\s0"" | quvi" 4
.el .IP "echo ``\s-1URL\s0'' | quvi" 4
.IX Item "echo URL | quvi"
Read from stdin. Same but with multiple URLs (in this case from a file):
.Sp
.Vb 5
\&  % cat >> URLs
\&  URL1
\&  URL2
\&  (CTRL+D)
\&  % quvi < URLs
.Ve
.SH "FILES"
.IX Header "FILES"
.IP "\fB~/.quvirc\fR" 4
.IX Item "~/.quvirc"
You can define most of the command line options in the
config file. For example:
.Sp
.Vb 4
\& agent = some_agent/1.0     # \-\-agent
\& proxy = http://foo:1234    # \-\-proxy
\& no\-verify                  # \-\-no\-verify
\& verbose\-libcurl            # \-\-verbose\-libcurl
.Ve
.Sp
Note that you can also define \f(CW$QUVI_HOME\fR and use it instead of \f(CW$HOME\fR (~).
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1QUVI_HOME\s0\fR" 4
.IX Item "QUVI_HOME"
Path to the directory containing the configuration file (.quvirc).
Mimics \f(CW$HOME\fR found on Unix-like systems. Note that using this
overrides the use of \f(CW$HOME\fR.
.IP "\fB\s-1QUVI_BASEDIR\s0\fR" 4
.IX Item "QUVI_BASEDIR"
Exclusive path to the directory holding the essential libquvi files,
or the Lua scripts.
.Sp
Exlusivity here means that by setting this variable, the user
can override all other built-in and default search paths.
.Sp
Not to be confused with \fB\s-1QUVI_HOME\s0\fR which is strictly for
\&\f(CWquvi(1)\fR, whereas \fB\s-1QUVI_BASEDIR\s0\fR is for libquvi.
.IP "\fB\s-1QUVI_SHOW_SCANDIR\s0\fR" 4
.IX Item "QUVI_SHOW_SCANDIR"
Set this variable if you need libquvi to report the scanned
directory paths. Each scanned path is printed to stderr.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
quvi exits with 0 on success and >0 if an error occurred.
.PP
.Vb 10
\&  QUVI_OK               = 0x00
\&  QUVI_MEM              = 0x01, Memory allocation failed
\&                            (or invalid quvi command line option)
\&  QUVI_BADHANDLE        = 0x02, Bad session handle
\&  QUVI_INVARG           = 0x03, Invalid function (or command line) arg
\&  QUVI_CURLINIT         = 0x04, libcurl initialization failed
\&  QUVI_LAST             = 0x05, Indicates end of list iteration
\&  QUVI_ABORTEDBYCALLBACK= 0x06, Aborted by callback function
\&  QUVI_LUAINIT          = 0x07, Lua initialization failure
\&  QUVI_NOLUAWEBSITE     = 0x08, Failed to find lua website scripts
\&  \-\-
\&  QUVI_PCRE             = 0x40, libpcre error occurred, deprecated 0.2.9+
\&  QUVI_NOSUPPORT        = 0x41, libquvi does not support the host
\&  QUVI_CURL             = 0x42, libcurl error occurred
\&  QUVI_ICONV            = 0x43, libiconv error occurred
\&  QUVI_LUA              = 0x44, lua error occurred
.Ve
.SH "DEBUGGING TIPS"
.IX Header "DEBUGGING TIPS"
.IP "\fB\-\-verbose\-libcurl\fR" 4
.IX Item "--verbose-libcurl"
You can use this switch to amp up libcurl verbosity.
.IP "\fBDebug symbols\fR" 4
.IX Item "Debug symbols"
Compile quvi with \f(CW\*(C`\-g\*(C'\fR, refer to \f(CWgcc(1)\fR documentation for the
details.
.IP "\fBOther tools\fR" 4
.IX Item "Other tools"
Make use of such tools as \f(CWstrace(1)\fR, \f(CWgdb(1)\fR and \f(CWvalgrind(1)\fR.
They may prove invaluable.
.SH "WWW"
.IX Header "WWW"
<http://quvi.sourceforge.net/>
.PP
<http://repo.or.cz/w/quvi.git>
.SH "CONTRIBUTE"
.IX Header "CONTRIBUTE"
<http://repo.or.cz/w/quvi.git/tree/HEAD:/doc>
.SH "BACKGROUND"
.IX Header "BACKGROUND"
quvi or \*(L"(qu)ery (vi)deo\*(R" for historical reasons. As of 0.2.15
a more suitable name would be qume or \*(L"(qu)ery (me)dia\*(R".
.PP
quvi was inspired by cclive. Embeddable \s-1LUA\s0 scripting was introduced
in 0.2.0.
.SH "LICENSE"
.IX Header "LICENSE"
quvi and libquvi are free software, licensed under the LGPLv2.1+.
The \s-1LUA\s0 scripts that quvi uses are considered as programs and using
the \s-1LUA\s0 scripts is \fBlinking\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toni Gundogdu <legatvs at sign gmail com>
.PP
Thanks to all those who have contributed to the project by sending patches,
reporting bugs and writing feedback. You know who you are.
